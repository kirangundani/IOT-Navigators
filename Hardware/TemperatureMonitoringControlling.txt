#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ThingSpeak.h>

// WiFi credentials
const char* ssid = "your_SSID";
const char* password = "your_PASSWORD";

// ThingSpeak API credentials
unsigned long myChannelNumber = <Your_Channel_Number>;
const char * myWriteAPIKey = "your_Write_API_Key";

// Create an instance of the LCD (I2C address 0x27 for 20x4 LCD)
LiquidCrystal_I2C lcd(0x27, 20, 4);

// Initialize the web server on port 80
ESP8266WebServer server(80);

// Setup WiFi and ThingSpeak
WiFiClient client;

int lowerThreshold = 20; // Default value
int upperThreshold = 25; // Default value

// Set the WiFi credentials and initialize the web server
void setup() {
  Serial.begin(115200);

  // Initialize LCD
  lcd.begin();
  lcd.setBacklight(1);
  lcd.clear();

  // Connect to WiFi
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");
  Serial.println(WiFi.localIP());

  // Initialize ThingSpeak
  ThingSpeak.begin(client);

  // Define the route for receiving fruit data
  server.on("/set_fruit", HTTP_POST, handleFruitData);

  // Start the server
  server.begin();
}

void loop() {
  // Handle incoming HTTP requests
  server.handleClient();
}

// Handle fruit data sent by the Raspberry Pi
void handleFruitData() {
  if (server.hasArg("fruit")) {
    String fruit = server.arg("fruit");
    Serial.println("Received fruit: " + fruit);

    // Display the fruit name, temperature, and humidity on the LCD
    lcd.clear();
    lcd.setCursor(0, 0); // First row
    lcd.print("Fruit: " + fruit);
    
    // Read or set dummy temperature and humidity values
    float temperature = random(18, 30); // Dummy value for temperature (replace with actual sensor data)
    float humidity = random(40, 60);   // Dummy value for humidity (replace with actual sensor data)
    
    lcd.setCursor(0, 1); // Second row
    lcd.print("Temp: " + String(temperature) + "C");
    
    lcd.setCursor(0, 2); // Third row
    lcd.print("Humidity: " + String(humidity) + "%");

    // Set temperature thresholds based on the fruit type
    if (fruit == "Apple") {
      lowerThreshold = 18;
      upperThreshold = 22;
    } else if (fruit == "Banana") {
      lowerThreshold = 23;
      upperThreshold = 27;
    } else if (fruit == "Orange") {
      lowerThreshold = 20;
      upperThreshold = 24;
    } else {
      lowerThreshold = 20;
      upperThreshold = 25;
    }

    // Send the data to ThingSpeak
    sendToThingSpeak(fruit, temperature, humidity);

    // Send a response to the Raspberry Pi
    server.send(200, "text/plain", "Fruit received and temperature thresholds updated");
  } else {
    server.send(400, "text/plain", "Fruit data not received");
  }
}

// Send data to ThingSpeak
void sendToThingSpeak(String fruit, float temperature, float humidity) {
  // Object detection: Set '1' if fruit detected, '0' if no fruit detected
  int objectDetected = (fruit != "") ? 1 : 0;

  // Write data to ThingSpeak channels
  ThingSpeak.setField(1, temperature);   // Channel 1 for temperature
  ThingSpeak.setField(2, humidity);      // Channel 2 for humidity
  ThingSpeak.setField(3, objectDetected); // Channel 3 for object detection (1 or 0)

  // Update ThingSpeak
  int responseCode = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);

  if (responseCode == 200) {
    Serial.println("Data sent to ThingSpeak successfully");
  } else {
    Serial.print("Error sending data: ");
    Serial.println(responseCode);
  }
}